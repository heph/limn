#!/usr/bin/env python
from __future__ import print_function

import click
import json
import os
import re
import sys
import urllib
import urllib2

CONTEXT_SETTINGS = {'help_option_names': ['-h', '--help']}
INVALID_REGEXP = re.compile(r'[^a-zA-Z0-9_]')

# http://stackoverflow.com/a/14981125
def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

@click.command(name='limn-env', context_settings=CONTEXT_SETTINGS)
@click.option(
  '-u', '--url',
  type=click.STRING,
  default='http://limn/',
  help='limn service url'
)
@click.option(
  '-p', '--prefix',
  type=click.STRING,
  multiple=True,
  default='env:',
  help='only load tags matching prefix (default="env:")'
)
@click.option(
  '-i', '--ignore-environment', '--pristine',
  is_flag=True,
  help='start with an empty environment'
)
@click.option(
  '--upcase',
  is_flag=True,
  help='convert all environment variable keys to uppercase'
)
@click.option(
  '--sanitize',
  is_flag=True,
  help='replace invalid characters in keys to underscores'
)
@click.argument('command_args', required=False, nargs=-1)
def main(url, prefix, pristine, upcase, sanitize, command_args):

  # Load the instance's signed ec2 identity document
  try:
    identity_document_url = 'http://169.254.169.254/latest/dynamic/instance-identity/pkcs7'
    pkcs7_identity = urllib2.urlopen(identity_document_url).read()
  except urllib2.HTTPError as e:
    eprint("{}: {}".format(e, identity_document_url))
    sys.exit(1)

  # POST the signed identity document to limn to identify this instance
  try:
    instance = json.loads(
      urllib2.urlopen(url, urllib.urlencode({"identity": pkcs7_identity})).read()
    )
  except urllib2.HTTPError as e:
    eprint("{}: {}".format(e, url))
    sys.exit(1)

  if 'tags' in instance:
    # Don't inherit existing environment variables
    env = dict()
    if not pristine:
      env = os.environ.copy()

    for k, v in instance['tags'].iteritems():
      # match tags against --prefix(es)
      if any(k.startswith(p) for p in prefix):
        _, k = k.split(':')

        # Uppercase environment variable keys
        k = k.upper() if upcase else k
        # Replace invalid characters with underscores
        k = INVALID_REGEXP.sub('_', k) if sanitize else k

        env.update({k: v})

    if command_args:
      os.execvpe(command_args[0], command_args, env)
    else:
      for k, v in env.iteritems():
        print("{}={}".format(k, json.dumps(v)))
  else:
    eprint("Warning: no tags found")


if __name__ == "__main__":
  main()
